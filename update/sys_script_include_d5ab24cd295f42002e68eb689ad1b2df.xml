<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_siam_light.SIAMQueue</api_name>
        <client_callable>false</client_callable>
        <description>This class handles creation and updating records in the SIAM queue table</description>
        <name>SIAMQueue</name>
        <script><![CDATA[var SIAMQueue = Class.create();
SIAMQueue.prototype = {
	
	QUEUE: 'x_snc_siam_light_queue',
	MSGTYPE: 'x_snc_siam_light_message_type',
	FLDMAP: 'x_snc_siam_light_field_map',
	STRCMAP: 'x_snc_siam_light_structure_map',
	
	initialize: function(msgType /* sys_id of message Type */ , target /* sys_id of target system */) {
		
		this.msgType = new GlideRecord(this.MSGTYPE);
		if (!this.msgType.get(msgType)) {
			throw new Error('Invalid Message Type');
		}
		
		// get complete fieldmap
		this.field_map = new GlideRecord(this.FLDMAP);
		this.field_map.addQuery('message_type', msgType);
		this.field_map.query();
		
		// get coalesce fields for later
		this.coalesce_fields = new GlideRecord(this.FLDMAP);
		this.coalesce_fields.addQuery('message_type', msgType);
		this.coalesce_fields.addQuery('coalesce', 'true');
		this.coalesce_fields.query();
		
		this.target = target;
		
		this.logger = new SIAMLogger();
	},
	
	setSource: function (source_record /* GlideRecord */) {
		
		if (source_record.getRecordClassName() == this.QUEUE) {
			this.queue = source_record;
			this.logger.setQueueReference(source_record.sys_id);
			
			if (/^[\],:{}\s]*$/.test(source_record.payload.replace(/\\["\\\/bfnrtu]/g, '@').
				replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
			replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
				this.record = new global.JSON().decode(source_record.payload);
				
			} else {
				this.logger.logError('Received JSON Payload not valid.');
			}
			
		} else {
			this.reference_table = source_record.getRecordClassName();
			this.reference_sys_id = source_record.sys_id;
			
			this.record = {};
			while (this.field_map.next()) {
				var output_type = this.field_map.output_value;
				
				if (this.field_map.field_run_script == true) {
					
					var vars = {
						'source': this.field_map,
						'current': source_record,
						'result': null
					};
					
					this.record[this.field_map.external_fieldname] = this._evaluateScript(this.field_map, 'field_transform_script', vars, 'result');
					
				} else if (this._isDateField(source_record, this.field_map.field)) {
					var gd = new GlideDate();
					gd.setValue(source_record.getValue(this.field_map.field));
					this.record[this.field_map.external_fieldname] = gd.getByFormat(this.field_map.date_format + "");
				} else if (output_type == 'database') {
					this.record[this.field_map.external_fieldname] = source_record.getValue(this.field_map.field);
				} else if (output_type == 'display') {
					this.record[this.field_map.external_fieldname] = source_record.getDisplayValue(this.field_map.field);
				}
				this.logger.logDebug('Mapped ' + this.field_map.field + ' to ' + this.field_map.external_fieldname + ' with value <' + this.record[this.field_map.external_fieldname] +'>');
			}
			
			// now process additional structers if any
			var gr_structure = new GlideRecord(this.STRCMAP);
			gr_structure.addQuery('message_type', this.msgType.sys_id);
			gr_structure.query();
			
			while(gr_structure.next()) {
				var gr_child = new GlideRecord(gr_structure.included_message_type.table);
				gr_child.addQuery(gr_structure.reference_value_field, source_record.sys_id);
				if (!gs.nil(gr_structure.output_condition)) {
					gr_child.addEncodedQuery(gr_structure.output_condition);
				}
				gr_child.query();
				this.record[gr_structure.external_fieldname] = {};
				while (gr_child.next()) {
					// TODO: use extracted method to map record to JSON string
					//get field map here
					var _field_map = new GlideRecord(this.FLDMAP);
					_field_map.addQuery('message_type', gr_structure.included_message_type);
					_field_map.query();
					while (_field_map.next()) {
						var _output_type = _field_map.output_value;
						if (_field_map.field_run_script == true) {
							
							var vars2 = {
								'source': _field_map,
								'current': gr_child,
								'result': null
							};
							
							this.record[gr_structure.external_fieldname][_field_map.external_fieldname] = this._evaluateScript(_field_map, 'field_transform_script', vars2, 'result');
						} else if ( _output_type == 'database') {
							this.record[gr_structure.external_fieldname][_field_map.external_fieldname] = gr_child.getValue(_field_map.field);
						} else if (_output_type == 'display') {
							this.record[gr_structure.external_fieldname][_field_map.external_fieldname] = gr_child.getDisplayValue(_field_map.field);
						}
						this.logger.logDebug('Mapped ' + _field_map.field + ' to ' + _field_map.external_fieldname + ' with value <' + this.record[gr_structure.external_fieldname][_field_map.external_fieldname] +'>');
					}
				}
			}
			
		}
	},
	
	updateRecord: function() {
		var gr_target;
		var created_sysid = '0';
		
		if (this.field_map.hasNext()) {
			// match record against database if possible
			var gr_search = new GlideRecord(this.msgType.table);
			while (this.coalesce_fields.next()) {
				var search_value = '';
				if (this.coalesce_fields.external_fieldname_run_script == true) {
					search_value = this._executeInboundScript(this.coalesce_fields);
				} else  {
					search_value =  this.record[this.coalesce_fields.external_fieldname];
				}
				gr_search.addQuery(this.coalesce_fields.field, search_value);
			}
			var enc_query = gr_search.getEncodedQuery();
			if (!gs.nil(enc_query)) {
				this.logger.logDebug('Search existing records with query: ' + enc_query);
				gr_search.query();
				if ( gr_search.next()) {
					gr_target = gr_search;
					if (this.queue.action != 'update' && this.queue.action != 'insert_or_update') {
						this.logger.logError('Record already exists, need update action');
						return false;
					}
					this.logger.logInfo('Found existing target record: ' + gr_target.getDisplayValue());
				}
			}
			// if nothing is assigned till now, create new record
			if (gs.nil(gr_target))  {
				if (this.queue.action != 'insert' && this.queue.action != 'insert_or_update') {
					this.logger.logError('Record does not exist, need insert action');
					return false;
				}
				this.logger.logInfo('No existing target found, creating new record in table ' + this.msgType.table);
				gr_target =  new GlideRecord(this.msgType.table);
				gr_target.initialize();
			}
			
			this._mapFieldsToGr(this.field_map, gr_target);
			var rc = gr_target.update();
			if (rc == null) {
				this.logger.logError('Error during save');
				return false;
			}
			// store return value
			created_sysid = gr_target.sys_id;
			
			// only update queue record if it is empty, otherwise we are a nested element
			if (SIAMUtil.nil(this.queue.reference_record)) {
				this.queue.reference_table = gr_target.getRecordClassName();
				this.queue.reference_record = gr_target.sys_id;
				this.queue.update();
			}
		}
		
		// now process additional structers if any
		var gr_structure = new GlideRecord(this.STRCMAP);
		gr_structure.addQuery('message_type', this.msgType.sys_id);
		gr_structure.query();
		
		while(gr_structure.next() && this.record) {
			// pushing to an array as it might be one anyway. This way processing is always the same
			var incl_record = new global.ArrayUtil().ensureArray(this.record[gr_structure.external_fieldname]);
			var len = 1;
			if (gr_structure.cardinality == 'n') {
				len = incl_record.length;
			}
			
			for (var i=0; i<len; i++) {
				var process = true;
				var struc_record = incl_record[i];
				if (struc_record) {
					// now check input condition script if any
					if (!gs.nil(gr_structure.input_condition_script)) {
						var vars = {
							'current': struc_record
						};
						
						if (this._evaluateScript(gr_structure, 'input_condition_script', vars) === true)  {
							process = true;
						} else {
							process = false;
						}
					}
					
					if (process) {
						var siamq = new SIAMQueue(gr_structure.included_message_type, this.target);
						siamq._setRecord(incl_record[i]);
						siamq._setQueueRecord(this.queue);
						if (gr_structure.child_sysid) {
							this.logger.logInfo('Updating child table field ' + gr_structure.reference_value_field + ' with reference to ' + gr_target.sys_id);
							
							siamq._setReferenceInfo(gr_structure.reference_value_field, gr_target.sys_id);
						}
						var child_sys_id = siamq.updateRecord();
						
						if (gr_structure.parent_sysid) {
							this.logger.logInfo('Updating parent table field ' + gr_structure.child_value_field + ' with reference to ' + child_sys_id);
							gr_target.setValue(gr_structure.child_value_field, child_sys_id);
							gr_target.update();
						}
					}
					
					
				}
			}
		}
		
		return created_sysid;
		
	},
	
	
	createOutput: function() {
		var gr_queue = new GlideRecord('x_snc_siam_light_queue');
		gr_queue.initialize();
		gr_queue.direction = 'output';
		gr_queue.action = 'insert';
		gr_queue.state = 'ready';
		gr_queue.message_type = this.msgType.sys_id;
		gr_queue.target = this.target;
		gr_queue.payload = new global.JSON().encode(this.record);
		gr_queue.reference_table = this.reference_table;
		gr_queue.reference_record = this.reference_sys_id;
		var qu_id = gr_queue.insert();
		this.logger.setQueueReference(qu_id);
	},
	
	_setRecordValue: function(gr, field, value) {
		if (value != undefined) {
			this.logger.logDebug('Inbound Mapping: Set ' + field + ' to ' + value );
			gr.setValue(field, value);
		}
	},
	
	_executeInboundScript: function(field_map_entry) {
		this.logger.logDebug('Running inbound script at field ' + field_map_entry.field);
		
		var vars = {
			'source': field_map_entry,
			'current': this.record,
			'result': null
		};
		
		return this._evaluateScript(field_map_entry, 'external_fieldname_transform_script', vars, 'result');
	},
	
	_mapFieldsToGr: function(field_map, gr_target) {
		while (field_map.next()) {
			if (this.field_map.external_fieldname_run_script == true) {
				this._setRecordValue(gr_target, field_map.field, this._executeInboundScript(field_map));
			} else if (this._isDateField(gr_target, field_map.field )) {
				var du = new DateUtil();
				var dt_ms = du.getDateFromFormat(this.record[field_map.external_fieldname], field_map.date_format);
				
				var gDate = new GlideDateTime();
				gDate.setValue(parseInt(dt_ms, 10));
				this._setRecordValue(gr_target, field_map.field, gDate);
				
			} else  {
				this._setRecordValue(gr_target, field_map.field, this.record[field_map.external_fieldname]);
			}
		}
		
		// update reference field if available
		if (this.reference_field && this.reference_value) {
			this._setRecordValue(gr_target, this.reference_field, this.reference_value);
		}
	},
	
	/* overwrite the decoded payload string with new object, required when nested structures are recieved */
	_setRecord: function(rec) {
		this.record = rec;
	},
	
	_setQueueRecord: function (qu_rec) {
		this.queue = qu_rec;
		this.logger.setQueueReference(qu_rec.sys_id);
	},
	
	
	_setReferenceInfo: function (field, value) {
		this.reference_field = field;
		this.reference_value = value;
	},
	
	_evaluateScript: function (gr_structure, field, vars, return_variable) {
		var return_value = '';
		try {
			this.logger.logInfo('Running script field ' + field);
			var _evaluator = new GlideScopedEvaluator();
			
			// set variables
			for (var key in vars) {
				if (vars.hasOwnProperty(key)) {
					_evaluator.putVariable(key, vars[key]);
				}
			}
			
			_evaluator.putVariable('log', this.logger);
			
			return_value =  _evaluator.evaluateScript(gr_structure, field);
			if (!gs.nil(return_variable)) {
				return_value = _evaluator.getVariable(return_variable) + '';
			}
		} catch (e) {
			this.logger.logError('Error in conditional script: ' + e);
		}
		
		this.logger.logInfo('Returning ' + return_value);
		return return_value;
	},
	
	_isDateField: function (record, field) {
		if (record && field) {
			var field_type = record.getElement(field).getED().getInternalType();
			if ((field_type == "glide_date" || field_type == "glide_date_time" || field_type == "datetime" || field_type == "date")) {
				return true;
			}
		}
		return false;
	},
	
	
	type: 'SIAMQueue'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin_SHARE</sys_created_by>
        <sys_created_on>2015-10-22 12:55:49</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>d5ab24cd295f42002e68eb689ad1b2df</sys_id>
        <sys_mod_count>129</sys_mod_count>
        <sys_name>SIAMQueue</sys_name>
        <sys_package display_value="SIAM Light" source="x_snc_siam_light">add64881295f42002e68eb689ad1b2ab</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SIAM Light">add64881295f42002e68eb689ad1b2ab</sys_scope>
        <sys_update_name>sys_script_include_d5ab24cd295f42002e68eb689ad1b2df</sys_update_name>
        <sys_updated_by>daniel.draes_SHARE</sys_updated_by>
        <sys_updated_on>2017-02-16 20:17:08</sys_updated_on>
    </sys_script_include>
</record_update>
